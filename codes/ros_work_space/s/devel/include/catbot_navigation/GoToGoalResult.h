// Generated by gencpp from file catbot_navigation/GoToGoalResult.msg
// DO NOT EDIT!


#ifndef CATBOT_NAVIGATION_MESSAGE_GOTOGOALRESULT_H
#define CATBOT_NAVIGATION_MESSAGE_GOTOGOALRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace catbot_navigation
{
template <class ContainerAllocator>
struct GoToGoalResult_
{
  typedef GoToGoalResult_<ContainerAllocator> Type;

  GoToGoalResult_()
    : targetReached(false)  {
    }
  GoToGoalResult_(const ContainerAllocator& _alloc)
    : targetReached(false)  {
  (void)_alloc;
    }



   typedef uint8_t _targetReached_type;
  _targetReached_type targetReached;




  typedef boost::shared_ptr< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> const> ConstPtr;

}; // struct GoToGoalResult_

typedef ::catbot_navigation::GoToGoalResult_<std::allocator<void> > GoToGoalResult;

typedef boost::shared_ptr< ::catbot_navigation::GoToGoalResult > GoToGoalResultPtr;
typedef boost::shared_ptr< ::catbot_navigation::GoToGoalResult const> GoToGoalResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::catbot_navigation::GoToGoalResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace catbot_navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'catbot_navigation': ['/home/ganam/s/devel/share/catbot_navigation/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7405910e0e48bc9fe5218f5d63db25f";
  }

  static const char* value(const ::catbot_navigation::GoToGoalResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7405910e0e48bc9ULL;
  static const uint64_t static_value2 = 0xfe5218f5d63db25fULL;
};

template<class ContainerAllocator>
struct DataType< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "catbot_navigation/GoToGoalResult";
  }

  static const char* value(const ::catbot_navigation::GoToGoalResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#Definition of Result Message\n\
bool targetReached\n\
";
  }

  static const char* value(const ::catbot_navigation::GoToGoalResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.targetReached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GoToGoalResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catbot_navigation::GoToGoalResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::catbot_navigation::GoToGoalResult_<ContainerAllocator>& v)
  {
    s << indent << "targetReached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.targetReached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CATBOT_NAVIGATION_MESSAGE_GOTOGOALRESULT_H

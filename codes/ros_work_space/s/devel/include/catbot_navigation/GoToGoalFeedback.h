// Generated by gencpp from file catbot_navigation/GoToGoalFeedback.msg
// DO NOT EDIT!


#ifndef CATBOT_NAVIGATION_MESSAGE_GOTOGOALFEEDBACK_H
#define CATBOT_NAVIGATION_MESSAGE_GOTOGOALFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace catbot_navigation
{
template <class ContainerAllocator>
struct GoToGoalFeedback_
{
  typedef GoToGoalFeedback_<ContainerAllocator> Type;

  GoToGoalFeedback_()
    : err_x(0.0)
    , err_y(0.0)
    , e_psi(0.0)  {
    }
  GoToGoalFeedback_(const ContainerAllocator& _alloc)
    : err_x(0.0)
    , err_y(0.0)
    , e_psi(0.0)  {
  (void)_alloc;
    }



   typedef double _err_x_type;
  _err_x_type err_x;

   typedef double _err_y_type;
  _err_y_type err_y;

   typedef double _e_psi_type;
  _e_psi_type e_psi;




  typedef boost::shared_ptr< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct GoToGoalFeedback_

typedef ::catbot_navigation::GoToGoalFeedback_<std::allocator<void> > GoToGoalFeedback;

typedef boost::shared_ptr< ::catbot_navigation::GoToGoalFeedback > GoToGoalFeedbackPtr;
typedef boost::shared_ptr< ::catbot_navigation::GoToGoalFeedback const> GoToGoalFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace catbot_navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'catbot_navigation': ['/home/ganam/s/devel/share/catbot_navigation/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60a20c6270af6bc8e54a51252ccf7a37";
  }

  static const char* value(const ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60a20c6270af6bc8ULL;
  static const uint64_t static_value2 = 0xe54a51252ccf7a37ULL;
};

template<class ContainerAllocator>
struct DataType< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "catbot_navigation/GoToGoalFeedback";
  }

  static const char* value(const ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
float64 err_x\n\
float64 err_y\n\
float64 e_psi\n\
\n\
";
  }

  static const char* value(const ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.err_x);
      stream.next(m.err_y);
      stream.next(m.e_psi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GoToGoalFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::catbot_navigation::GoToGoalFeedback_<ContainerAllocator>& v)
  {
    s << indent << "err_x: ";
    Printer<double>::stream(s, indent + "  ", v.err_x);
    s << indent << "err_y: ";
    Printer<double>::stream(s, indent + "  ", v.err_y);
    s << indent << "e_psi: ";
    Printer<double>::stream(s, indent + "  ", v.e_psi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CATBOT_NAVIGATION_MESSAGE_GOTOGOALFEEDBACK_H
